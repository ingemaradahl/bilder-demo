#define RADIUS 4.0

pixelwise Color gaussianBlur(Image input_img, Float stdDev = 1.0, Float x, Float y)
{
  Float gaussianWeight(Float dist)
  {
    return (1.0/(sqrt(stdDev)*1.0))*exp(-pow(dist/RADIUS,2.0)/(2.0*stdDev));
  };

  Color horizontal(Float x, Float y)
  {
    Image tmp = input_img;
    Vec3 sum = Vec3(0.0);
    for (Float i = -RADIUS; i <= RADIUS; i++)
    {
      sum += tmp(x+i, y).rgb * gaussianWeight(abs(i));
    }


    return Color(sum / Vec3(RADIUS*2.0), 1.0);
  };

  Color vertical(Image input_img, Float x, Float y)
  {
    Vec3 sum = Vec3(0.0);
    for (Float i = -RADIUS; i <= RADIUS; i++)
    {
      sum += input_img(x, y+i).rgb * gaussianWeight(abs(i));
    }

    return Color(sum / Vec3(RADIUS*2.0), 1.0);
  };

  return vertical(horizontal, x, y);
}

Color main(Float x, Float y) {
  external Image img;

  return gaussianBlur(img, 1.0, x, y);
}

