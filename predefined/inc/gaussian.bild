#define RADIUS 4.0

Color gaussianBlur(Image input_img, Float x, Float y) {
	return gaussianBlur(input_img, 1.0, x, y);
}

pixelwise Color gaussianBlur(Image input_img, Float stdDev, Float x, Float y)
{
	Float gaussianWeight(Float dist)
	{
		return (1.0/(sqrt(stdDev)*1.0))*exp(-pow(dist/RADIUS,2.0)/(2.0*stdDev));
	};

	Color horizontal(Float x, Float y)
	{
		Float weight = 0.0;
		RGB sum = RGB(0.0);
		for (Float i = -RADIUS; i <= RADIUS; i++)
		{
			Float w = gaussianWeight(abs(i));
			sum += input_img(x+i, y).rgb * w;
			weight += w;
		}

		return Color(sum / weight, 1.0);
	};

	Color vertical(Image input_img, Float x, Float y)
	{
		Float weight = 0.0;
		RGB sum = RGB(0.0);
		for (Float i = -RADIUS; i <= RADIUS; i++)
		{
			Float w = gaussianWeight(abs(i));
			sum += input_img(x, y+i).rgb * w;
			weight += w;
		}

		return Color(sum / weight, 1.0);
	};

	return vertical(horizontal, x, y);
}

