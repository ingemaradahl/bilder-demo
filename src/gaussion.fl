// sqrt(2*PI)
//#define SQRTPI = 2.506628274631
//#define RADIUS = 4

Color gaussianBlur(Image input_img, Float stdDev = 1.0, Float x, Float y)
{
  Float gaussianWeight(Float dist)
  {
    return (1/(sqrt(stdDev)*1.0))*exp(-pow(dist/RADIUS,2)/(2*stdDev));
  };

  Color horizontal(Float x, Float y)
  {
    Vec3 sum = 0.0;
    for (Float i= -RADIUS; i <= RADIUS; i++)
    {
      sum += input_img(x+i, y).rgb * gaussianWeight(abs(i));
    }

    return Color(sum, 1.0);
  };

  Color vertical(Image input_img, x, y)
  {
    Vec3 sum = 0.0;
    for (Float i= -RADIUS; i <= RADIUS; i++)
    {
      sum += input_img(x, y+i).rgb * gaussianWeight(abs(i));
    }

    return Color(sum, 1.0);
  };

  return vertical(horizontal(x, y), x, y);
}

